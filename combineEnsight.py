import os  
import argparse
import numpy as np
from pathlib import Path

def main():

    np.seterr(divide='raise', invalid='raise')
    parser = argparse.ArgumentParser(description="Options")
    parser.add_argument('--resultFolders',  type=str, required=True, nargs='+', help='path to data')
    parser.add_argument('--resPath',type=str, required=True, help='path to data')
    parser.add_argument('--simType',type=str, required=True, help='generally the naming prefix you used before animation, model or solution. Generally tissue|cs')
    parser.add_argument('--dt',type=float, required=True, help='the dt should be the same for all result folder to not having inconsistencies')
    args = parser.parse_args()

    # We will use the .geo from the first result folder, we create the animation and map the .ens to the new naming and folder with symlinks

    # Create the folder
    if not os.path.exists(args.resPath):
        os.mkdir(args.resPath)
    if not os.path.exists(os.path.join(args.resPath, args.simType)):
        os.mkdir(os.path.join(args.resPath, args.simType))

    os.symlink(os.path.join(args.resultFolders[0], args.simType, '{}_model.geo'.format(args.simType)), 
               os.path.join(args.resPath, args.simType, '{}_model.geo'.format(args.simType)))
    
    # Read the animation data
    time_values = {}
    total_time_values = 0
    for i, folder in enumerate(args.resultFolders):

        directory = Path(os.path.join(folder, args.simType))
        time_values[str(i)] = len(list(directory.glob("*.ens")))

        total_time_values += time_values[str(i)]

        # Check the dts are equal
        with open(os.path.join(folder, args.simType, "{}_animation.case".format(args.simType)), 'r') as f:
            lines = f.readlines()
            for line in lines:
                if 'time values' in line:
                    local_dx = np.array(line.split('time values: ')[1].split(' \n')[0].split(' ')).astype(float)
                    local_dx = local_dx[1] - local_dx[0]

                    if local_dx != args.dt:
                        raise ValueError('Check the dts are equal in all results used')

    total_time_values -= len(args.resultFolders) - 1  # we drop the first solution of every non first sim as it is the same as the last of the previous sim
    # Create the animation file
    nDigits = len(str(total_time_values))
    data = '# Ensight output generated by: ELECTRA v.0.6.3\n'
    data += '\n'
    data += 'FORMAT\n'
    data += 'type: ensight gold\n'
    data += '\n'
    data += 'GEOMETRY\n'
    data += 'model: {}_model.geo\n'.format(args.simType)
    data += '\n'
    data += 'VARIABLE\n'
    data += 'scalar per node: Potential {}_solution{}.ens\n'.format(args.simType, '*' * nDigits)
    data += '\n'
    data += 'TIME\n'
    data += 'time set: 1\n'
    data += 'number of steps: {}\n'.format(total_time_values)
    data += 'filename start number: 0\n'
    data += 'filename increment: 1\n'

    timeWriteStep = 10
    samples = np.arange(total_time_values)
    times = samples * args.dt
    for idx in range(0, samples.shape[0],timeWriteStep):
        currentTimes = list(times[idx:idx+timeWriteStep])
        currentTimes = [str(x) for x in currentTimes]

        tmp = "time values: " if idx == 0 else "\t\t\t"
        for itime in currentTimes:
            tmp += itime + " "
        tmp += "\n"

        data += tmp

    with open(os.path.join(args.resPath, args.simType, "{}_animation.case".format(args.simType)), 'w') as f:
        f.writelines(data)


    # Map the .ens
    # We make the zero first as the following folder's zero solution is the same as the last of the previous folder solution
    srcFile = os.path.join(args.resultFolders[0], args.simType, '{}_solution{}.ens'.format(args.simType, str(0).zfill(len(str(time_values[str(0)])))))
    dstFile = os.path.join(args.resPath, args.simType, '{}_solution{}.ens'.format(args.simType, str(0).zfill(nDigits)))
    os.symlink(srcFile, dstFile) 
    print(srcFile, dstFile)

    count = 0
    for key in time_values.keys():
        nDigitsLocal = len(str(time_values[key]))
        for i in range(1, time_values[key]):
            srcFile = os.path.join(args.resultFolders[int(key)], args.simType, '{}_solution{}.ens'.format(args.simType, str(i).zfill(nDigitsLocal)))
            dstFile = os.path.join(args.resPath, args.simType, '{}_solution{}.ens'.format(args.simType, str(i+count).zfill(nDigits)))
            os.symlink(srcFile, dstFile) 
            print(srcFile, dstFile)
        count += i






    

if __name__ == '__main__':
    main()